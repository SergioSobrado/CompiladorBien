// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Anali.flex


@SuppressWarnings("fallthrough")
public class AnalizadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\0\1\2\22\0\1\3\7\0\2\4"+
    "\2\0\1\5\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\2\10\1\14\1\10\1\15\1\10\1\0\1\16"+
    "\1\17\1\20\1\17\2\0\1\21\1\22\1\21\1\23"+
    "\1\24\1\21\1\25\1\21\1\26\4\21\1\27\14\21"+
    "\1\4\1\6\1\4\1\0\1\30\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\0\1\64\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\27\3\1\11\1\12\1\7\7\3\1\13\15\3"+
    "\1\14\17\3\1\15\2\3\1\14\17\3\1\16\32\3"+
    "\1\17\1\3\1\20\3\3\1\21\14\3\1\7\1\0"+
    "\2\3\1\20\1\17\6\3\1\12\11\3\1\14\11\3"+
    "\1\22\2\3\1\23\1\22\5\3\1\24\3\3\1\16"+
    "\3\3\1\0\2\3\1\25\11\3\1\26\15\3\1\27"+
    "\25\3\1\30\1\3\1\22\2\3\3\0\11\3\1\31"+
    "\1\32\6\3\1\33\23\3\1\34\3\3\1\14\2\3"+
    "\1\35\2\3\1\0\25\3\1\36\3\3\1\37\10\3"+
    "\1\11\1\3\1\40\2\3\1\34\3\3\1\41\1\42"+
    "\3\3\1\43\3\0\1\16\2\3\1\22\15\3\1\44"+
    "\1\3\1\22\23\3\1\45\15\3\1\43\3\3\1\46"+
    "\1\47\3\3\1\13\1\3\1\50\11\3\1\0\1\3"+
    "\3\0\2\3\1\0\5\3\1\51\7\3\1\52\12\3"+
    "\1\53\16\3\1\54\1\26\2\3\1\40\1\55\1\3"+
    "\1\56\5\3\1\57\3\3\1\0\1\22\1\3\3\0"+
    "\1\3\1\0\6\3\1\60\16\3\1\35\6\3\1\50"+
    "\2\3\1\0\1\3\1\0\2\3\1\61\3\3\2\0"+
    "\1\17\1\0\1\3\1\0\22\3\1\0\1\3\1\0"+
    "\1\62\1\0\4\3\3\0\1\3\1\0\7\3\1\63"+
    "\10\3\1\0\1\3\2\0\3\3\3\0\1\3\1\13"+
    "\1\12\14\3\1\0\1\3\2\0\3\3\3\0\4\3"+
    "\1\0\1\3\2\0\3\3\3\0\4\3\1\50\1\3"+
    "\1\0\1\56\3\3\1\64\1\0\2\3\1\33\13\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[661];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\237\0\65\0\324\0\65"+
    "\0\u0109\0\u0109\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247"+
    "\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\65\0\65\0\65\0\u0601\0\u0636\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40"+
    "\0\u0d75\0\237\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab"+
    "\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553"+
    "\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\237"+
    "\0\u16fb\0\237\0\u1730\0\u1765\0\u179a\0\237\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\237\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f"+
    "\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7"+
    "\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f"+
    "\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017"+
    "\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\237\0\237\0\u2155"+
    "\0\u218a\0\u21bf\0\u21f4\0\u2229\0\237\0\u225e\0\u2293\0\u22c8"+
    "\0\237\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\237"+
    "\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae"+
    "\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756"+
    "\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\237"+
    "\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71"+
    "\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19"+
    "\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\237\0\u2d57\0\u2d8c"+
    "\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34"+
    "\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\237\0\u30a7"+
    "\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\237\0\u321a"+
    "\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2"+
    "\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a"+
    "\0\u359f\0\u35d4\0\237\0\u3609\0\u363e\0\u3673\0\237\0\u36a8"+
    "\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850"+
    "\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8"+
    "\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0"+
    "\0\u3bd5\0\u3c0a\0\237\0\u3c3f\0\u3c74\0\u3ca9\0\237\0\u3cde"+
    "\0\u3d13\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\237"+
    "\0\u3e86\0\237\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a\0\u3f8f\0\u3fc4"+
    "\0\237\0\237\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd\0\u4102"+
    "\0\u4137\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa"+
    "\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d\0\u4452"+
    "\0\u4487\0\u44bc\0\237\0\u44f1\0\u4526\0\u455b\0\u4590\0\u45c5"+
    "\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce\0\u4703\0\u4738\0\u476d"+
    "\0\u47a2\0\u47d7\0\u480c\0\u4841\0\u4876\0\u48ab\0\u48e0\0\u4915"+
    "\0\65\0\u494a\0\u497f\0\u49b4\0\u49e9\0\u4a1e\0\u4a53\0\u4a88"+
    "\0\u4abd\0\u4af2\0\u4b27\0\u4b5c\0\u4b91\0\u4bc6\0\237\0\u4bfb"+
    "\0\u4c30\0\u4c65\0\237\0\237\0\u4c9a\0\u4ccf\0\u4d04\0\237"+
    "\0\u4d39\0\237\0\u4d6e\0\u4da3\0\u4dd8\0\u4e0d\0\u4e42\0\u4e77"+
    "\0\u4eac\0\u4ee1\0\u4f16\0\u4f4b\0\u4f80\0\u4fb5\0\u4fea\0\u501f"+
    "\0\u5054\0\u5089\0\u50be\0\u50f3\0\u5128\0\u515d\0\u5192\0\u51c7"+
    "\0\237\0\u51fc\0\u5231\0\u5266\0\u529b\0\u52d0\0\u5305\0\u533a"+
    "\0\237\0\u536f\0\u53a4\0\u53d9\0\u540e\0\u5443\0\u5478\0\u54ad"+
    "\0\u54e2\0\u5517\0\u554c\0\237\0\u5581\0\u55b6\0\u55eb\0\u5620"+
    "\0\u5655\0\u568a\0\u56bf\0\u56f4\0\u5729\0\u575e\0\u5793\0\u57c8"+
    "\0\u57fd\0\u5832\0\237\0\237\0\u5867\0\u589c\0\u58d1\0\237"+
    "\0\u5906\0\u593b\0\u5970\0\u59a5\0\u59da\0\u5a0f\0\u5a44\0\237"+
    "\0\u5a79\0\u5aae\0\u5ae3\0\u5b18\0\65\0\u5b4d\0\u5b82\0\u5bb7"+
    "\0\u5bec\0\u5c21\0\u5c56\0\u5c8b\0\u5cc0\0\u5cf5\0\u5d2a\0\u5d5f"+
    "\0\u5d94\0\237\0\u5dc9\0\u5dfe\0\u5e33\0\u5e68\0\u5e9d\0\u5ed2"+
    "\0\u5f07\0\u5f3c\0\u5f71\0\u5fa6\0\u5fdb\0\u6010\0\u6045\0\u607a"+
    "\0\237\0\u60af\0\u60e4\0\u6119\0\u614e\0\u6183\0\u61b8\0\u61ed"+
    "\0\u6222\0\u6257\0\u628c\0\u62c1\0\u62f6\0\u632b\0\u6360\0\237"+
    "\0\u6395\0\u63ca\0\u63ff\0\u6434\0\u6469\0\65\0\u649e\0\u64d3"+
    "\0\u6508\0\u653d\0\u6572\0\u65a7\0\u65dc\0\u6611\0\u6646\0\u667b"+
    "\0\u66b0\0\u66e5\0\u671a\0\u674f\0\u6784\0\u67b9\0\u67ee\0\u6823"+
    "\0\u6858\0\u688d\0\u68c2\0\u68f7\0\u692c\0\u6961\0\237\0\u6996"+
    "\0\u69cb\0\u6a00\0\u6a35\0\u6a6a\0\u6a9f\0\u6ad4\0\u6b09\0\u6b3e"+
    "\0\u6b73\0\u6ba8\0\u6bdd\0\u6c12\0\u6c47\0\u6c7c\0\u6cb1\0\u6ce6"+
    "\0\237\0\u6d1b\0\u6d50\0\u6d85\0\u6dba\0\u6def\0\u6e24\0\u6e59"+
    "\0\u6e8e\0\u6ec3\0\u6ef8\0\u6f2d\0\u6f62\0\u6f97\0\u6fcc\0\u7001"+
    "\0\u7036\0\u706b\0\u70a0\0\u70d5\0\65\0\237\0\u710a\0\u713f"+
    "\0\u7174\0\u71a9\0\u71de\0\u7213\0\u7248\0\u727d\0\u72b2\0\u72e7"+
    "\0\u731c\0\u7351\0\u7386\0\u73bb\0\u73f0\0\u7425\0\u745a\0\u748f"+
    "\0\u74c4\0\u74f9\0\u752e\0\u7563\0\u7598\0\u75cd\0\u7602\0\u7637"+
    "\0\u766c\0\u76a1\0\u76d6\0\u770b\0\u7740\0\u7775\0\u77aa\0\u77df"+
    "\0\u7814\0\u7849\0\u787e\0\u78b3\0\u78e8\0\u791d\0\65\0\u7952"+
    "\0\u7987\0\65\0\u79bc\0\u79f1\0\u7a26\0\65\0\u7a5b\0\u7a90"+
    "\0\u7ac5\0\65\0\u7afa\0\u7b2f\0\u7b64\0\u7b99\0\u7bce\0\u7c03"+
    "\0\u7c38\0\u7c6d\0\u7ca2\0\u7cd7\0\u7d0c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[661];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\2\1\4\1\5\1\0\1\6"+
    "\6\7\1\10\1\11\1\12\1\5\1\13\1\5\1\14"+
    "\3\5\1\0\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\5\1\24\1\25\1\5\1\26\1\27\1\30"+
    "\1\31\1\32\1\5\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\5\1\42\1\43\66\0\1\2\71\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\32\5\12\0"+
    "\6\7\67\0\1\44\52\0\1\5\1\0\6\5\3\0"+
    "\3\5\1\45\3\5\1\0\32\5\10\0\1\5\1\0"+
    "\6\5\3\0\6\5\1\46\1\0\32\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\1\5\1\47\1\5"+
    "\1\50\7\5\1\51\1\5\1\52\3\5\1\53\1\54"+
    "\1\55\1\56\5\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\57\3\5\1\60\5\5\1\61"+
    "\2\5\1\62\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\1\63\6\5\1\64\3\5\1\65\1\66"+
    "\1\5\1\67\13\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\70\3\5\1\71\5\5\1\72"+
    "\11\5\1\73\1\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\2\5\1\74\10\5\1\75\1\76\1\77"+
    "\7\5\1\100\1\5\1\101\2\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\1\102\7\5\1\103\2\5"+
    "\1\104\2\5\1\105\2\5\1\106\2\5\1\107\5\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\13\5"+
    "\1\110\2\5\1\111\13\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\5\5\1\112\5\5\1\113\1\114"+
    "\1\115\1\116\3\5\1\117\7\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\14\5\1\120\1\121\6\5"+
    "\1\122\5\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\123\3\5\1\124\5\5\1\125\13\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\16\5"+
    "\1\126\5\5\1\127\5\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\1\130\3\5\1\131\11\5\1\132"+
    "\5\5\1\133\5\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\17\5\1\134\1\5\1\135\2\5\1\136"+
    "\5\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\1\137\15\5\1\140\2\5\1\141\2\5\1\142\5\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\143\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\144\2\5\1\145\1\146\5\5\1\147"+
    "\4\5\1\150\1\151\1\5\1\152\3\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\4\5\1\153\2\5"+
    "\1\154\11\5\1\155\6\5\1\156\1\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\15\5\1\157\4\5"+
    "\1\160\7\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\1\161\7\5\1\162\5\5\1\163\13\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\2\5\1\164"+
    "\4\5\1\165\22\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\16\5\1\166\13\5\10\0\1\5\1\0"+
    "\6\5\3\0\4\5\1\167\2\5\1\0\32\5\10\0"+
    "\1\5\1\0\6\5\3\0\2\5\1\170\4\5\1\0"+
    "\32\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\22\5\1\171\7\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\2\5\2\172\26\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\10\5\1\173\21\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\3\5\1\135"+
    "\26\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\10\5\1\174\10\5\1\175\10\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\14\5\1\176\5\5\1\177"+
    "\7\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\16\5\1\200\13\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\23\5\1\201\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\6\5\1\202\23\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\23\5\1\203"+
    "\6\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\16\5\1\204\13\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\205\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\22\5\1\206\1\207\6\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\1\210"+
    "\31\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\1\211\15\5\1\212\13\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\17\5\1\213\12\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\214\14\5\1\215\1\216"+
    "\14\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\2\5\1\217\2\5\1\220\5\5\1\221\16\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\170"+
    "\20\5\1\172\4\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\24\5\1\222\5\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\15\5\1\223\14\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\7\5\1\224"+
    "\22\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\22\5\1\225\7\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\17\5\1\226\12\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\3\5\1\227\20\5\1\230"+
    "\5\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\1\231\31\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\10\5\1\232\6\5\1\233\3\5\1\234\6\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\13\5"+
    "\1\235\16\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\13\5\1\236\1\5\1\237\14\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\16\5\1\240\13\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\21\5"+
    "\1\241\10\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\10\5\1\242\21\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\15\5\1\243\14\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\16\5\1\244\13\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\23\5"+
    "\1\245\6\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\13\5\1\246\16\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\17\5\1\247\12\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\2\5\1\250\10\5"+
    "\1\251\6\5\1\252\1\253\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\4\5\1\254\25\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\22\5\1\255"+
    "\7\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\17\5\1\256\12\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\31\5\1\256\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\14\5\1\120\15\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\1\176\22\5\1\257"+
    "\6\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\22\5\1\260\7\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\15\5\1\261\14\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\3\5\1\262\21\5\1\176"+
    "\4\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\13\5\1\172\7\5\1\263\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\14\5\1\264\15\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\26\5\1\265"+
    "\1\266\2\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\267\15\5\1\270\1\271\6\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\13\5\1\272"+
    "\1\273\15\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\274\25\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\275\32\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\23\5\1\276\6\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\21\5\1\277\10\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\17\5"+
    "\1\300\12\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\10\5\1\301\5\5\1\302\13\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\1\5\1\303\20\5"+
    "\1\304\7\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\3\5\1\305\2\5\1\306\1\5\1\307\7\5"+
    "\1\310\1\5\1\311\1\312\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\2\5\1\313\27\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\13\5\1\176"+
    "\2\5\1\314\2\5\1\176\10\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\6\5\1\315\23\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\2\5\1\316"+
    "\27\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\1\317\20\5\1\320\10\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\1\5\1\172\15\5\1\321\12\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\10\5"+
    "\1\322\21\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\14\5\1\323\15\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\10\5\1\324\10\5\1\325\10\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\1\326"+
    "\23\5\1\327\3\5\1\330\1\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\17\5\1\331\12\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\10\5\1\332"+
    "\11\5\1\333\7\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\265\3\5\1\334\21\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\21\5\1\257"+
    "\10\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\335\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\10\5\1\336\2\5\1\337\16\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\7\5\1\340"+
    "\22\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\10\5\1\341\21\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\21\5\1\135\10\5\10\0\1\5\1\0"+
    "\6\5\3\0\5\5\1\342\1\5\1\0\32\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\23\5\1\343"+
    "\6\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\1\344\5\5\1\345\23\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\23\5\1\346\6\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\1\347\31\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\350"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\14\5\1\351\15\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\16\5\1\257\13\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\10\5\1\352\21\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\1\353\15\5"+
    "\1\354\13\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\13\5\1\257\16\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\1\355\31\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\4\5\1\356\25\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\2\5\1\357"+
    "\27\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\360\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\22\5\1\361\7\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\15\5\1\362\14\5\33\0"+
    "\1\363\20\0\1\364\6\0\1\365\11\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\17\5\1\366\12\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\2\5\1\367"+
    "\17\5\1\370\1\371\6\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\13\5\1\372\16\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\10\5\1\373\21\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\374\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\1\5\1\375\30\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\1\376\31\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\16\5\1\377\13\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u0100"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\u0101\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\3\5\1\u0102\1\5\1\u0103\2\5\1\u0104"+
    "\11\5\1\u0105\3\5\1\u0106\3\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\14\5\1\257\15\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\13\5\1\u0107"+
    "\16\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\170\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\13\5\1\u0108\2\5\1\u0109\13\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u010a"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\22\5\1\u010b\7\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u010c\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\1\u010d\31\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\1\u010e\31\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u010f"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\u0110\25\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\2\5\1\u0111\27\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\1\5\1\u0112\30\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\16\5\1\256"+
    "\13\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\u0113\25\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\13\5\1\u0114\16\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\13\5\1\u0115\16\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\10\5\1\u0116"+
    "\21\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\u0117\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u0118\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\27\5\1\u0119\2\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u011a"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\u011b\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\6\5\1\257\23\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\24\5\1\u011c\5\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\1\u011d\31\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\u011e\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\23\5\1\u011f\6\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\27\5\1\u0120\2\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\24\5\1\u0121\5\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\13\5"+
    "\1\u0122\16\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\1\5\1\u0123\30\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\21\5\1\u0124\10\5\37\0\1\u0125"+
    "\35\0\1\5\1\0\6\5\3\0\7\5\1\0\16\5"+
    "\1\u0126\13\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\22\5\1\u0127\7\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\15\5\1\u0128\7\5\1\u0129\4\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\23\5"+
    "\1\u012a\6\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\13\5\1\u012b\16\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\7\5\1\300\22\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\16\5\1\u011f\13\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\10\5"+
    "\1\u012c\21\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\15\5\1\u012d\14\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\24\5\1\u012e\5\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\2\5\1\u012f\27\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\21\5"+
    "\1\u0130\2\5\1\u0131\5\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\24\5\1\u0132\5\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\21\5\1\u010e\10\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\15\5"+
    "\1\u0133\14\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\12\5\1\u0134\17\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\2\5\1\u0135\20\5\1\u0136\6\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\24\5"+
    "\1\u0137\5\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\u0138\25\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\23\5\1\u0139\6\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\17\5\1\u013a\12\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\22\5"+
    "\1\u013b\7\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\u013c\11\5\1\u013d\13\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\10\5\1\u013e\21\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\u013f\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\u0140\25\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\16\5\1\u0141\13\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\10\5\1\146\13\5"+
    "\1\u0142\5\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\15\5\1\u0143\14\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\23\5\1\u0144\6\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\3\5\1\257\26\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\1\u0145"+
    "\31\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\1\u0146\31\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\13\5\1\u0147\16\5\10\0\1\5\1\0\6\5"+
    "\3\0\6\5\1\u0148\1\0\32\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\21\5\1\u0149\10\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\22\5\1\u014a"+
    "\7\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\15\5\1\u014b\14\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\7\5\1\u014c\22\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\30\5\1\u014d\1\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\21\5\1\u014e"+
    "\10\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\10\5\1\u014f\21\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\15\5\1\u0148\14\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\15\5\1\u0150\14\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\21\5\1\271"+
    "\10\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\12\5\1\u0151\17\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\7\5\1\u0152\22\5\10\0\1\5\1\0"+
    "\1\5\1\u0153\1\5\1\u0154\1\5\1\u0155\3\0\7\5"+
    "\1\0\32\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\22\5\1\u0156\7\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\4\5\1\265\25\5\61\0\1\u0157"+
    "\42\0\1\u0158\70\0\1\u0159\31\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\13\5\1\u015a\16\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\4\5\1\u015b\17\5"+
    "\1\u015c\5\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\23\5\1\u015d\6\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\10\5\1\u015e\21\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\1\u015f\22\5\1\u0160"+
    "\6\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\15\5\1\u0161\14\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\23\5\1\u0162\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\13\5\1\u0163\16\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\14\5\1\u0164"+
    "\15\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\10\5\1\u0104\21\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\30\5\1\u0107\1\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\4\5\1\u0165\25\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\16\5\1\u0166"+
    "\13\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\5\5\1\112\24\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\26\5\1\152\3\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\7\5\1\165\22\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\10\5\1\u0167"+
    "\21\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\u0168\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\15\5\1\u0169\3\5\1\u016a\10\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u016b"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\15\5\1\u016c\14\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\13\5\1\u016d\16\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\23\5\1\257\6\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\1\u016e\31\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\15\5"+
    "\1\u016f\14\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\23\5\1\u0170\6\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\1\204\31\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\6\5\1\u0171\23\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u0172"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\24\5\1\u0173\5\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\15\5\1\u0174\14\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\1\u0175\3\5\1\u0176\25\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\21\5"+
    "\1\u0177\10\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\2\5\1\u0178\27\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\23\5\1\u0107\6\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\13\5\1\u0179\16\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\1\5"+
    "\1\u017a\30\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\22\5\1\u017b\7\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\2\5\1\u017c\27\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\2\5\1\u017d\27\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\17\5"+
    "\1\u017e\12\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\u017f\25\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\1\u0180\31\5\53\0\1\u0181\21\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\5\5\1\u0182"+
    "\24\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\116\25\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\23\5\1\377\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\1\u0183\31\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\4\5\1\u0184\25\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\10\5"+
    "\1\u0185\21\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\22\5\1\u0186\7\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\23\5\1\u0187\6\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\10\5\1\u0188\21\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\24\5"+
    "\1\u0189\5\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\30\5\1\330\1\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\21\5\1\u018a\10\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\21\5\1\u018b\10\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\336\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\u018c\25\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\12\5\1\u018d\17\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\10\5\1\u018e\21\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\2\5"+
    "\1\260\27\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\21\5\1\u018f\10\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\2\5\1\u0190\27\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\13\5\1\u0191\16\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\1\u0192"+
    "\31\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\26\5\1\u0193\3\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\23\5\1\u0194\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\3\5\1\u0195\4\5\1\u0196"+
    "\4\5\1\u0197\14\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\15\5\1\u0198\14\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\17\5\1\u0199\12\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\6\5\1\u019a"+
    "\23\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\24\5\1\u019b\5\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\23\5\1\u019c\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\21\5\1\u0155\10\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\112"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\1\u019d\31\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\1\u019e\15\5\1\u019f\13\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\14\5\1\u01a0\15\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\10\5\1\u01a1"+
    "\21\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\u01a2\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\2\5\1\u01a3\27\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\3\5\1\271\26\5\10\0"+
    "\1\5\1\0\4\5\1\u0155\1\5\3\0\7\5\1\0"+
    "\32\5\10\0\1\5\1\0\2\5\1\u0155\3\5\3\0"+
    "\7\5\1\0\32\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\u01a4\32\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\2\5\1\u01a5\12\5\1\u016c\14\5\33\0"+
    "\1\u01a6\107\0\1\u01a7\45\0\1\u01a8\35\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\4\5\1\u01a9\25\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\17\5\1\u013e"+
    "\12\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\u01aa\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\u01ab\4\5\1\u01ac\3\5\1\u01ad\14\5\1\u01ae"+
    "\4\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\15\5\1\u01af\14\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\21\5\1\u0174\10\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\30\5\1\u01b0\1\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u0196"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\u01b1\25\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\257\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\10\5\1\u01b2\21\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\2\5\1\u01b3"+
    "\27\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\u011f\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\2\5\1\u01b4\27\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\23\5\1\u014a\6\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\3\5\1\u01b5"+
    "\26\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\15\5\1\u0194\14\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\16\5\1\u01b6\13\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\13\5\1\u01b7\16\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\2\5\1\u01b8"+
    "\27\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\3\5\1\u01b9\26\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\10\5\1\u01ba\21\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\1\u01bb\31\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\14\5\1\u01bc\15\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\3\5"+
    "\1\u01bd\26\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\170\25\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\2\5\1\u01be\12\5\1\u01bf\14\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\1\u01c0"+
    "\31\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\5\5\1\u01c1\13\5\1\u01c2\10\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\4\5\1\u01c3\25\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u01c4"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\13\5\1\u01c5\16\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\17\5\1\u01c6\12\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\4\5\1\u01c7\25\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\7\5\1\u01c8"+
    "\22\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\16\5\1\u01c9\4\5\1\u01ca\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\21\5\1\u01cb\10\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\23\5\1\u01cc"+
    "\6\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\14\5\1\u01cd\15\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\23\5\1\u01ce\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\2\5\1\u01cf\27\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\2\5\1\u014a"+
    "\27\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\u01d0\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u01d1\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\21\5\1\u01d2\10\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u01d3"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\15\5\1\u01d4\14\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\10\5\1\u01d5\21\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\23\5\1\116\6\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\16\5\1\u01d6"+
    "\13\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\2\5\1\u01d7\27\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\7\5\1\u01d8\22\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\1\u01d9\31\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\3\5\1\u01da\26\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\u01db\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\3\5\1\u0107\26\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\1\u01dc\31\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\17\5\1\u01dd\12\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\1\u01de\31\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\10\5"+
    "\1\u017a\21\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\2\5\1\u01df\27\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\22\5\1\u01e0\7\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\5\5\1\u01e0\24\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\u01e1\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\15\5\1\u01e2\14\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\10\5\1\u01e3\21\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\u01e4\32\5\56\0\1\u01e5"+
    "\16\0\1\5\1\0\6\5\3\0\7\5\1\0\1\u01e6"+
    "\31\5\43\0\1\u01e7\100\0\1\u01e8\53\0\1\u01e9\26\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\27\5\1\257"+
    "\2\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\u01ea\10\5\35\0\1\u01eb\37\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\27\5\1\u01ec\2\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\15\5\1\u01ed"+
    "\14\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\100\25\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\24\5\1\u01ee\5\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\17\5\1\u0174\12\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\2\5\1\u01ef"+
    "\27\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\13\5\1\u01f0\16\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\10\5\1\u01df\21\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\22\5\1\u018f\7\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\23\5\1\u01f1"+
    "\6\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\30\5\1\u01f2\1\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\7\5\1\u011f\22\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\16\5\1\u01f3\13\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\13\5\1\u01f4"+
    "\16\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\u01f5\25\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u019a\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\4\5\1\u01f6\25\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\23\5\1\u01f7"+
    "\6\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\3\5\1\u01f8\26\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\1\u01f9\31\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\24\5\1\u01fa\5\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\17\5\1\u01fb\12\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\u0198\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\1\u01fc\31\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\17\5\1\u01fd\12\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\5\5\1\u01fe\6\5\1\u01ff"+
    "\15\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\10\5\1\u0200\21\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\21\5\1\u0201\10\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\5\5\1\u0202\24\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\16\5\1\u0203"+
    "\13\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\u0204\25\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u01b9\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\23\5\1\u0205\6\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u0206"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\u0207\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u0208\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\23\5\1\u0209\6\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\25\5\1\u020a"+
    "\4\5\10\0\1\5\1\0\6\5\3\0\7\5\1\u020b"+
    "\32\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\u020c\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\u020d\32\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\5\5\1\u0107\24\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\14\5\1\u020e\15\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\16\5\1\u020f"+
    "\13\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\13\5\1\u0210\16\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\23\5\1\u018f\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\23\5\1\u0211\6\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\3\5\1\u0212"+
    "\26\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\16\5\1\u0213\13\5\35\0\1\u0214\12\0\1\u0215\24\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\22\5\1\u018c"+
    "\7\5\56\0\1\u0216\62\0\1\u0217\46\0\1\u0216\36\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u0218"+
    "\25\5\33\0\1\u0219\41\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\17\5\1\u021a\12\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\10\5\1\u011a\21\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u011f"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\u01ab"+
    "\32\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\1\u021b\31\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\5\5\1\u021c\24\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\15\5\1\170\14\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\1\u021d\21\5\1\u021e"+
    "\7\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\15\5\1\u021f\14\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\16\5\1\u01db\13\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\10\5\1\u0220\21\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\16\5\1\u0221"+
    "\13\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\2\5\1\u0222\27\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\17\5\1\u0223\12\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\23\5\1\u0224\6\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\2\5\1\362"+
    "\27\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\u01d3\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\10\5\1\u0225\21\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\4\5\1\u0226\25\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\15\5\1\u0227"+
    "\14\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\16\5\1\u0228\13\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\21\5\1\u0210\10\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\14\5\1\u0229\15\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u022a"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\u0194\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\17\5\1\u022b\12\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\u022c\22\5\1\u013b\7\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\30\5\1\116"+
    "\1\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\u022d\25\5\33\0\1\u022e\41\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\4\5\1\u022f\25\5\46\0"+
    "\1\u0230\26\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\u0107\25\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\21\5\1\u0231\10\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\10\5\1\u0232\21\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\4\5\1\u0233"+
    "\25\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\15\5\1\u0234\14\5\33\0\1\u0235\15\0\1\u0236\64\0"+
    "\1\u0237\63\0\1\u0216\24\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\15\5\1\u0238\14\5\55\0\1\u0239\17\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\21\5\1\u0107"+
    "\10\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\u023a\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\16\5\1\u023b\13\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\2\5\1\u023c\16\5\1\u023d"+
    "\10\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\u023e\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\23\5\1\u023f\6\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\1\u0240\31\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\5\5\1\u0194\24\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\u0241\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\23\5\1\u0242\6\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\10\5\1\u0243\21\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\4\5\1\u0244\25\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\23\5"+
    "\1\u0245\6\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\23\5\1\u0246\6\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\21\5\1\u0247\10\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\16\5\1\u0248\13\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\3\5"+
    "\1\u018f\26\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\21\5\1\u0249\10\5\51\0\1\u024a\23\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\21\5\1\u024b\10\5"+
    "\55\0\1\u024c\60\0\1\u024d\23\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\23\5\1\u024e\6\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\2\5\1\116\27\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\27\5"+
    "\1\u024f\2\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\4\5\1\u0250\25\5\50\0\1\u0251\63\0\1\u0252"+
    "\54\0\1\u0253\35\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\23\5\1\u0254\6\5\56\0\1\u0255\16\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\4\5\1\u0256\25\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\24\5"+
    "\1\u0257\5\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\2\5\1\u0258\27\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\6\5\1\u0259\23\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\1\u025a\31\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\22\5\1\u0241"+
    "\7\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\23\5\1\u025b\6\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u025c\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\16\5\1\u025d\13\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\13\5\1\u025c"+
    "\16\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\7\5\1\u025e\22\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u025f\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\14\5\1\u0260\15\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\21\5\1\u0261"+
    "\10\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\4\5\1\u0262\25\5\50\0\1\u0263\24\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\5\5\1\u0264\24\5\55\0"+
    "\1\u0265\44\0\1\u0266\37\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u0267\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\16\5\1\u0268\13\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\21\5\1\u0269"+
    "\10\5\35\0\1\u026a\76\0\1\u026b\77\0\1\u026c\12\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\14\5\1\u026d"+
    "\15\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\15\5\1\u025c\14\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\4\5\1\u026e\25\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\24\5\1\u026f\5\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\23\5\1\u0127"+
    "\6\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\10\5\1\u0270\21\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\3\5\1\116\26\5\10\0\1\5\1\0"+
    "\6\5\3\0\7\5\1\0\15\5\1\u01d3\14\5\10\0"+
    "\1\5\1\0\6\5\3\0\7\5\1\0\16\5\1\u025c"+
    "\13\5\10\0\1\5\1\0\6\5\3\0\7\5\1\0"+
    "\21\5\1\116\10\5\10\0\1\5\1\0\6\5\3\0"+
    "\7\5\1\0\1\u018c\31\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\30\5\1\u0234\1\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\23\5\1\u01ef\6\5"+
    "\35\0\1\u0271\37\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\13\5\1\u0272\16\5\37\0\1\u0273\60\0\1\u0274"+
    "\41\0\1\5\1\0\6\5\3\0\7\5\1\0\3\5"+
    "\1\u0275\26\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\24\5\1\u0276\5\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\21\5\1\u0277\10\5\37\0\1\u0278"+
    "\70\0\1\u0279\56\0\1\u027a\37\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\16\5\1\u027b\13\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\22\5\1\u027c\7\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\14\5"+
    "\1\u027d\15\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\16\5\1\u027e\13\5\37\0\1\u027f\35\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\16\5\1\u0280\13\5"+
    "\54\0\1\u0281\56\0\1\u0282\26\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\16\5\1\u0283\13\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\23\5\1\u0284\6\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\16\5"+
    "\1\u0285\13\5\46\0\1\u0286\74\0\1\u0286\45\0\1\u0287"+
    "\35\0\1\5\1\0\6\5\3\0\7\5\1\0\3\5"+
    "\1\u0288\26\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\22\5\1\116\7\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\4\5\1\u0289\25\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\15\5\1\116\14\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\26\5"+
    "\1\u0234\3\5\56\0\1\u028a\16\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\17\5\1\u028b\12\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\16\5\1\u028c\13\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\21\5"+
    "\1\u01d3\10\5\52\0\1\u0279\22\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\10\5\1\u028d\21\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\15\5\1\u018c\14\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\4\5"+
    "\1\u028e\25\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\5\5\1\u028f\24\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\5\5\1\u0290\24\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\21\5\1\u0220\10\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\1\5"+
    "\1\u0291\30\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\10\5\1\u0292\21\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\16\5\1\u0293\13\5\10\0\1\5"+
    "\1\0\6\5\3\0\7\5\1\0\2\5\1\u0220\27\5"+
    "\10\0\1\5\1\0\6\5\3\0\7\5\1\0\24\5"+
    "\1\u0294\5\5\10\0\1\5\1\0\6\5\3\0\7\5"+
    "\1\0\15\5\1\u0295\14\5\10\0\1\5\1\0\6\5"+
    "\3\0\7\5\1\0\3\5\1\u027c\26\5\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[32065];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\31\1\3\11\147\1\1\0\60\1\1\0\65\1\3\0"+
    "\57\1\1\0\61\1\3\0\47\1\1\11\42\1\1\0"+
    "\1\1\3\0\2\1\1\0\70\1\1\0\1\11\1\1"+
    "\3\0\1\1\1\0\37\1\1\0\1\1\1\0\6\1"+
    "\2\0\1\11\1\0\1\1\1\0\22\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\3\0\1\1\1\0\20\1"+
    "\1\0\1\1\2\0\3\1\3\0\1\1\1\11\15\1"+
    "\1\0\1\1\2\0\3\1\3\0\4\1\1\0\1\1"+
    "\2\0\3\1\3\0\4\1\1\11\1\1\1\0\1\11"+
    "\3\1\1\11\1\0\2\1\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[661];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
 
 /* Código personalizado */
 
 // Se agregó una propiedad para verificar si existen tokens pendientes
 private boolean TokenExist = false;
 
 public boolean existenTokens(){
 return this.TokenExist;
 }
 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
   /* Código que se ejecutará en el constructor de la clase */
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
 
 /* Código a ejecutar al finalizar el análisis, en este caso cambiaremos el valor de una variable bandera */
 this.TokenExist = false;
 
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { //
            }
          // fall through
          case 53: break;
          case 2:
            { Token t = new Token(yytext(), "Agrupar");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 54: break;
          case 3:
            { Token t = new Token(yytext(), "Variables");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 55: break;
          case 4:
            { Token t = new Token(yytext(), "Separacion");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 56: break;
          case 5:
            { Token t = new Token(yytext(), "Numero");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 57: break;
          case 6:
            { Token t = new Token(yytext(), "Finalcodigo");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 58: break;
          case 7:
            { Token t = new Token(yytext(), "Comparador");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 59: break;
          case 8:
            { Token t = new Token("", "Asignacion");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 60: break;
          case 9:
            { Token t = new Token(yytext(), "IncioEstructura");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 61: break;
          case 10:
            { Token t = new Token(yytext(), "FinalEstructura");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 62: break;
          case 11:
            { Token t = new Token(yytext(), "Cambiardato");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 63: break;
          case 12:
            { Token t = new Token(yytext(), "Ciclo");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 64: break;
          case 13:
            { Token t = new Token(yytext(), "Condicion");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 65: break;
          case 14:
            { Token t = new Token(yytext(), "OperadorLogico");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 66: break;
          case 15:
            { Token t = new Token(yytext(), "Funcion");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 67: break;
          case 16:
            { Token t = new Token(yytext(), "Operador");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 68: break;
          case 17:
            { Token t = new Token(yytext(), "Ensamblador");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 69: break;
          case 18:
            { Token t = new Token(yytext(), "TipodeDato");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 70: break;
          case 19:
            { Token t = new Token(yytext(), "Saltar");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 71: break;
          case 20:
            { Token t = new Token(yytext(), "Objetos");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 72: break;
          case 21:
            { Token t = new Token(yytext(), "Pila");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 73: break;
          case 22:
            { Token t = new Token(yytext(), "Devolvervalorfuncion");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 74: break;
          case 23:
            { Token t = new Token(yytext(), "Intentar");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 75: break;
          case 24:
            { Token t = new Token(yytext(), "Bloqueseleccionado");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 76: break;
          case 25:
            { Token t = new Token(yytext(), "Imprimir");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 77: break;
          case 26:
            { Token t = new Token("", "Negaciondecondicion");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 78: break;
          case 27:
            { Token t = new Token(yytext(), "Evaluador");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 79: break;
          case 28:
            { Token t = new Token(yytext(), "Estructura");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 80: break;
          case 29:
            { Token t = new Token(yytext(), "Nulo");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 81: break;
          case 30:
            { Token t = new Token(yytext(), "Referencias");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 82: break;
          case 31:
            { Token t = new Token("", "Verdadero");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 83: break;
          case 32:
            { Token t = new Token(yytext(), "Metodos");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 84: break;
          case 33:
            { Token t = new Token("", "Salirciclo");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 85: break;
          case 34:
            { Token t = new Token(yytext(), "global");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 86: break;
          case 35:
            { Token t = new Token(yytext(), "Clases");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 87: break;
          case 36:
            { Token t = new Token("", "Falso");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 88: break;
          case 37:
            { Token t = new Token(yytext(), "OperadorAsignacion");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 89: break;
          case 38:
            { Token t = new Token(yytext(), "Lanzarerror");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 90: break;
          case 39:
            { Token t = new Token(yytext(), "Concepto");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 91: break;
          case 40:
            { Token t = new Token(yytext(), "Importar");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 92: break;
          case 41:
            { Token t = new Token(yytext(), "Eliminarinstancia");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 93: break;
          case 42:
            { Token t = new Token(yytext(), "Privado");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 94: break;
          case 43:
            { Token t = new Token(yytext(), "Modulo");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 95: break;
          case 44:
            { Token t = new Token(yytext(), "Excepciones");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 96: break;
          case 45:
            { Token t = new Token(yytext(), "Seleccion");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 97: break;
          case 46:
            { Token t = new Token(yytext(), "Hilo");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 98: break;
          case 47:
            { Token t = new Token(yytext(), "Alineamiento");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 99: break;
          case 48:
            { Token t = new Token(yytext(), "EjecutaCodigo");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 100: break;
          case 49:
            { Token t = new Token(yytext(), "Subclase");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 101: break;
          case 50:
            { Token t = new Token(yytext(), "Plantilla");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 102: break;
          case 51:
            { Token t = new Token(yytext(), "Interfaz");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 103: break;
          case 52:
            { Token t = new Token(yytext(), "Atomico");
 this.TokenExist = true;
 return t;
            }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
